//
//  UserLoginViewController.swift
//  AppleIdLogin
//
//  Created by Emmanuvel Thamel on 3/23/20.
//  Copyright (c) 2020 Creative Software. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AuthenticationServices

protocol UserLoginDisplayLogic: class
{
    func displayLoggedInUser()
}

class UserLoginViewController: UIViewController, UserLoginDisplayLogic
{
    var interactor: UserLoginBusinessLogic?
    var router: (NSObjectProtocol & UserLoginRoutingLogic & UserLoginDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = UserLoginInteractor()
        let presenter = UserLoginPresenter()
        let router = UserLoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupView()
    }
    
    // MARK: Setup View
    private func setupView() {
        overrideUserInterfaceStyle = .light

        let signInWithAppleButton = ASAuthorizationAppleIDButton()
        signInWithAppleButton.addTarget(self, action: #selector(didTapSignInWithAppleIdButton), for: .touchUpInside)
        signInWithAppleButton.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(signInWithAppleButton)

        // button constraints
        signInWithAppleButton.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        signInWithAppleButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 30).isActive = true
        signInWithAppleButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -30).isActive = true
    }
    
    // MARK: Login with AppleId
    
    @objc func didTapSignInWithAppleIdButton()
    {
        let provider = ASAuthorizationAppleIDProvider()
        let request = provider.createRequest()
        request.requestedScopes = [.fullName, .email]

        let controller = ASAuthorizationController(authorizationRequests: [request])
        controller.presentationContextProvider = self
        interactor?.loginWithAppleId(controller: controller)
    }
    
    func displayLoggedInUser()
    {
        router?.routeToUserDetail(segue: nil)
    }
}

extension UserLoginViewController: ASAuthorizationControllerPresentationContextProviding {
    func presentationAnchor(for controller: ASAuthorizationController) -> ASPresentationAnchor {
        return view.window!
    }
}
